#!/usr/bin/env python3


#import global module
import os, glob, random, shutil, sys, json
import subprocess as sp
from matplotlib.pyplot import title
import numpy as np
from matplotlib.colors import LogNorm
import warnings
warnings.filterwarnings('ignore')
from sklearn.metrics import mean_squared_error, r2_score


import dpdata

#import my module
from utils import DPAlog, create_path, arg_sort, string_2_array, make_iter_name, select_logs, typemap_to_symbols, symbols_to_typemap
from utils import select_dirs, select_all_dirs, process_bar
from utils import figure_output_options

###########################################################
def dp_test_functions():
    while True:
        print("\n")
        print("=======================================================")
        print("                    Main Menu 2                        ")
        print("             Post analysis for dp test                 ")
        print(" (  0)  dp test for specified dir                      ")
        print(" (  1)  dp test for all OUTCAR in current all sub-dirs ")
        print(" (  2)  dp test for a deepmd raw dir                   ")
        print("                                                       ")
        print("                                                       ")
        print("                 About Descriptor                      ")
        print(" ( 10)  Calculate sel values based on r-cut            ")
        print(" (100)  dp test using DP calculator                    ")
        print("\n Tips: Input -10 to return main manu                 ")
        print("=======================================================")
        jsel = input("\n Please input the menu index\n")
        if jsel == str(1):
            #all_outcar = select_logs("./", "OUTCAR")
            str_in = input("\n Please input the root dir name: ")
            dp_potential = input("\n Please input the deep potential name (default is graph.000.pb). ")
            if dp_potential == "":
                dp_potential = "graph.000.pb"
            str_in_in = input("\n If per natoms? Y(y) or N(n): ")
            str_in_in_in = input("\n dp test for (1) all frames (e.g., AIMD traj) or (2) final frame (e.g., Opt task)? ")
            if_natoms = True
            total_frames = -1
            if str_in_in == "N" or str_in_in == "n":
                if_natoms = False
            if str_in_in_in == str(1):
                total_frames=0
            dp_test_for_all_OUTCAR_in_current_all_sub_dirs(root_dir=str_in, dp_potential=dp_potential, if_natoms=if_natoms, frames=total_frames)

        elif jsel == str(0):
            str_in = input("\n If perform dp test? y or n: ")
            if str_in == "Y" or str_in == "y":
                str_in = input("\n Please input the root dir that generated by dpgen collect: ")
                if not os.path.exists(str_in):
                    raise FileNotFoundError(" Cannot find the dir %s, plaese check again."%str_in)
                total_dirs = select_dirs(str_in)
                dp_potential = input("\n Please input the pb potential file name: ")
                counter = 0
                for dir_name in total_dirs:
                    counter += 1
                    dp_test_for_every_system(dir_name, dp_potential)
                    process_bar(counter, len(total_dirs), Process="dp testing ...")   

            str_in = input ("\n Now, all the dp test tasks have been finished, if plot those data? y or n: ")
            if str_in == "Y" or str_in == "y":
                import matplotlib.pyplot as plt
                from plot_new import set_legend, bold_axis_and_ticks
                from plot_new import plot_energy_comparison, plot_force_comparison, plot_error_distribution, plot_force_contour_distribution
                system_path = glob.glob(os.path.join("./", "dp_test_energy_*.json"))
                system_path.sort()
                system = []
                for sys_path in system_path:
                    system.append(sys_path.split("_")[3])
                system = set(system)
                sub_dirs = []
                for sys_path in system_path:
                    sub_dirs.append(sys_path.split("_")[4][:-5])
                sub_dirs = set(sub_dirs)
                
                ksel = input("\n Plot properties for (1) individual system (defined with same formula) or (2) total or (3) every sub-dir or (4) total sub-dirs: ")
                if int(ksel) == 2:
                    energy_DFT, energy_DP, force_DFT, force_DP = [], [], [], []
                    for sys_tmp in system:
                        total_energy_json_files = glob.glob(os.path.join("./", "dp_test_energy_%s_*.json"%sys_tmp))
                        total_force_json_files = glob.glob(os.path.join("./", "dp_test_force_%s_*.json"%sys_tmp))
                        for json_energy_file in total_energy_json_files:
                            jdata = json.load(open(json_energy_file))
                            energy_DFT.extend(jdata["DFT"])
                            energy_DP.extend(jdata["DP"])
                        for json_force_file in total_force_json_files:
                            jdata = json.load(open(json_force_file))
                            force_DFT.extend(np.array(jdata["DFT"]).flatten().tolist())
                            force_DP.extend(np.array(jdata["DP"]).flatten().tolist())
                    energy_RMSE = np.sqrt(mean_squared_error(energy_DFT, energy_DP))
                    force_RMSE  = np.sqrt(mean_squared_error(force_DFT, force_DP))

                    print(" All Systems: ")
                    print(" Energy RMSE: %.3e   eV/Atom"% np.sqrt(mean_squared_error(energy_DFT, energy_DP)))
                    print(" Energy R^2 : %.7f"%r2_score(energy_DFT, energy_DP))
                    print(" Force  RMSE: %.3e   eV/Angstrom"% np.sqrt(mean_squared_error(force_DFT, force_DP)))
                    print(" Force  R^2 : %.7f"%r2_score(force_DFT, force_DP))   
                    # plot energy comparison 
                    plt = plot_energy_comparison(energy_DFT, energy_DP)
                    plt.savefig("All_Systems_Energy_Comparison.png")
                    plt.title("All Systems")
                    plt.close()
                        
                    # plot force comparison 
                    plt = plot_force_comparison(force_DFT, force_DP)
                    plt.savefig("All_Systems_Force_Comparison.png")
                    plt.title("All Systems")
                    plt.close()

                    # plot energy error distribution
                    plt = plot_error_distribution(energy_DFT, energy_DP)
                    plt.savefig("All_Systems_Energy_Error_Distribution.png")
                    plt.title("All Systems")
                    plt.close()

                    # plot force error distribution
                    plt = plot_error_distribution(force_DFT, force_DP)
                    plt.savefig("All_Systems_Force_Error_Distribution.png")
                    plt.title("All Systems")
                    plt.close()
                        
                    # plot force contour distribution
                    plt = plot_force_contour_distribution(force_DFT, force_DP)
                    plt.savefig("All_Systems_Force_Error_Contour.png") 
                    plt.close()     
                elif int(ksel) == 4:
                    fig = plt.figure()
                    axes = fig.add_subplot()
                    
                    for dir_tmp in sub_dirs:
                        energy_DFT, energy_DP = [], []
                        force_DFT, force_DP = [], []
                        total_energy_json_file = glob.glob(os.path.join("./", "dp_test_energy_*_%s.json"%dir_tmp))
                        total_force_json_file = glob.glob(os.path.join("./", "dp_test_force_*_%s.json"%dir_tmp))
                        for json_file in total_energy_json_file:
                            jdata = json.load(open(json_file))
                            energy_DFT.extend(jdata["DFT"])
                            energy_DP.extend(jdata["DP"])

                        for json_file in total_force_json_file:
                            jdata = json.load(open(json_file))
                            force_DFT.extend(jdata["DFT"])
                            force_DP.extend(jdata["DP"])
                        force_DFT = np.array(force_DFT).flatten().tolist()
                        force_DP  = np.array(force_DP).flatten().tolist()

                        axes.scatter(energy_DFT, energy_DP, alpha=0.6)
                    bold_axis_and_ticks(axes)
                    set_legend(axes, sub_dirs)
                    plt.show()

                
                elif int(ksel) == 3:
                    for dir_tmp in sub_dirs:
                        total_energy_json_files = glob.glob(os.path.join("./", "dp_test_energy_*_%s.json"%dir_tmp))
                        total_force_json_files = glob.glob(os.path.join("./", "dp_test_force_*_%s.json"%dir_tmp))
                        total_energy_json_files.sort()
                        total_force_json_files.sort()

                        energy_DFT, energy_DP = [], []
                        force_DFT, force_DP = [], []

                        for json_energy_file in total_energy_json_files:
                            jdata = json.load(open(json_energy_file))
                            energy_DFT.extend(jdata["DFT"])
                            energy_DP.extend(jdata["DP"])
                    
                        for json_force_file in total_force_json_files:
                            jdata = json.load(open(json_force_file))
                            force_DFT.extend(jdata["DFT"])
                            force_DP.extend(jdata["DP"])
                        
                        force_DFT = np.array(force_DFT).flatten().tolist()
                        force_DP  = np.array(force_DP).flatten().tolist()
                    
                        print(" Dir Name: %s"%dir_tmp)
                        print(" Energy RMSE: %.3e   eV/Atom"% np.sqrt(mean_squared_error(energy_DFT, energy_DP)))
                        print(" Energy R^2 : %.7f   "%r2_score(energy_DFT, energy_DP))
                        print(" Force  RMSE: %.3e   eV/Angstrom"% np.sqrt(mean_squared_error(force_DFT, force_DP)))
                        print(" Force  R^2 : %.7f   "%r2_score(force_DFT, force_DP))
                        # plot energy comparison 
                        plt = plot_energy_comparison(energy_DFT, energy_DP, title=dir_tmp)
                        plt.savefig("%s_Energy_Comparison.png"%dir_tmp)
                        plt.close()
                        
                        # plot force comparison 
                        plt = plot_force_comparison(force_DFT, force_DP, title=dir_tmp)
                        plt.savefig("%s_Force_Comparison.png"%dir_tmp)
                        plt.close()

                        # plot energy error distribution
                        plt = plot_error_distribution(energy_DFT, energy_DP, title=dir_tmp)
                        plt.savefig("%s_Energy_Error_Distribution.png"%dir_tmp)
                        plt.close()

                        # plot force error distribution
                        plt = plot_error_distribution(force_DFT, force_DP, title=dir_tmp)
                        plt.savefig("%s_Force_Error_Distribution.png"%dir_tmp)
                        plt.close()
                        
                        # plot force contour distribution
                        plt = plot_force_contour_distribution(force_DFT, force_DP, title=dir_tmp)
                        plt.savefig("%s_Force_Error_Contour.png"%dir_tmp)
                        #plt.show() 
                        plt.close()

                elif int(ksel) == 1:              
                    for sys_tmp in system:
                        total_energy_json_files = glob.glob(os.path.join("./", "dp_test_energy_%s_*.json"%sys_tmp))
                        total_force_json_files = glob.glob(os.path.join("./", "dp_test_force_%s_*.json"%sys_tmp))
                        total_energy_json_files.sort()
                        total_force_json_files.sort()
                        energy_DFT, energy_DP = [], []
                        force_DFT, force_DP = [], []
                    
                        for json_energy_file in total_energy_json_files:
                            jdata = json.load(open(json_energy_file))
                            energy_DFT.extend(jdata["DFT"])
                            energy_DP.extend(jdata["DP"])
                    
                        for json_force_file in total_force_json_files:
                            jdata = json.load(open(json_force_file))
                            force_DFT.extend(jdata["DFT"])
                            force_DP.extend(jdata["DP"])
                        
                        force_DFT = np.array(force_DFT).flatten().tolist()
                        force_DP  = np.array(force_DP).flatten().tolist()

                        energy_RMSE = np.sqrt(mean_squared_error(energy_DFT, energy_DP))
                        force_RMSE  = np.sqrt(mean_squared_error(force_DFT, force_DP))

                        print(" System: %s"%sys_tmp)
                        print(" Energy RMSE: %.3e   eV/Atom"% np.sqrt(mean_squared_error(energy_DFT, energy_DP)))
                        print(" Energy R^2 : %.7f   "%r2_score(energy_DFT, energy_DP))
                        print(" Force  RMSE: %.3e   eV/Angstrom"% np.sqrt(mean_squared_error(force_DFT, force_DP)))
                        print(" Force  R^2 : %.7f   "%r2_score(force_DFT, force_DP))
                        # plot energy comparison 
                        plt = plot_energy_comparison(energy_DFT, energy_DP, title=sys_tmp)
                        plt.savefig("%s_Energy_Comparison.png"%sys_tmp)
                        plt.close()
                        
                        # plot force comparison 
                        plt = plot_force_comparison(force_DFT, force_DP, title=sys_tmp)
                        plt.savefig("%s_Force_Comparison.png"%sys_tmp)
                        plt.close()

                        # plot energy error distribution
                        plt = plot_error_distribution(energy_DFT, energy_DP, title=sys_tmp)
                        plt.savefig("%s_Energy_Error_Distribution.png"%sys_tmp)
                        plt.close()

                        # plot force error distribution
                        plt = plot_error_distribution(force_DFT, force_DP, title=sys_tmp)
                        plt.savefig("%s_Force_Error_Distribution.png"%sys_tmp)
                        plt.close()
                        
                        # plot force contour distribution
                        plt = plot_force_contour_distribution(force_DFT, force_DP, title=sys_tmp)
                        plt.savefig("%s_Force_Error_Contour.png"%sys_tmp)
                        #plt.show() 
                        plt.close()      
        elif jsel == str(10):
            from utils import Box
            from fileio import read_deepmd_npy
            box, moles = read_deepmd_npy("sys.Li9Co12O24")
            print(len(moles))
        elif jsel == str(2):
            str_in = input("\n Please input the dir name: ")
            dp_potential = input("\n Please input the deep potential name: ")
            dp_test_for_deepmd_raw_dir(root_dir=str_in, dp_potential=dp_potential)

        elif jsel == str(-10):
            break
        else:
            print(" !!! Unspported menu index, please input again. !!!")
###########################################################


###########################################################
def dp_test_for_all_OUTCAR_in_current_all_sub_dirs(root_dir, dp_potential, if_natoms=False, frames=-1):
    import dpdata
    from deepmd.infer import DeepPot

    dp = DeepPot(dp_potential)
    result_energy, result_force = {}, {}
    for tmp in ["DFT", "DP"]:
        result_energy[tmp] = []
        result_force[tmp] = []

    all_outcar = sorted(select_logs(root_dir, "OUTCAR"))

    #counter = 1
    for outcar in all_outcar:
        labeled_system = dpdata.LabeledSystem(outcar, fmt="vasp/outcar")
        if labeled_system.get_nframes() == 0:
            print("Cannot find system in %s..."%outcar)
            continue
        if if_natoms:
            natoms = labeled_system.get_natoms()
        else:
            natoms = 1

        if frames == -1:
            total_frames = [-1, ]
        else:
            total_frames = range(labeled_system.get_nframes())
        for iframe in total_frames:
            result_energy["DFT"].append(labeled_system["energies"][iframe]/natoms)
            result_force["DFT"].append(labeled_system["forces"][iframe].tolist())
            coordinate = labeled_system["coords"][iframe].reshape([1, -1])
            cell = labeled_system["cells"][iframe].reshape([1, -1])
            atype = labeled_system["atom_types"]
            e, f, v = dp.eval(coordinate, cell, atype)
            result_energy["DP"].append(e[0][0]/natoms)
            result_force["DP"].append(f[0].tolist())
            DPAlog.info("%s: %.3f"%(outcar, labeled_system["energies"][iframe]/natoms-e[0][0]/natoms))
        #process_bar(counter, len(all_outcar), "dp test...")
        #counter += 1
    json_str = json.dumps(result_energy, indent=4)
    output_json = 'dp_test_energy.json'
    with open(output_json, "w") as f:
        f.write(json_str)

def dp_test_for_every_sub_dir(dir_name: str, dp_potential: str) -> None:
    import dpdata

    result_energy, result_force = {}, {}

def dp_test_for_every_system(dir_name: str, dp_potential: str) -> None:
    import dpdata
    from deepmd.infer import DeepPot

    result_energy, result_force = {}, {}
    for tmp in ["DFT", "DP"]:
        result_energy[tmp] = []
        result_force[tmp] = []

    dp = DeepPot(dp_potential)
    labeledsystem = dpdata.LabeledSystem(dir_name, fmt="deepmd/npy")
    natoms = labeledsystem.get_natoms()
    counter = 1
    for iframe in range(labeledsystem.get_nframes()):
        result_energy["DFT"].append(labeledsystem["energies"][iframe]/natoms)
        result_force["DFT"].append(labeledsystem["forces"][iframe].tolist())
        coordinate = labeledsystem["coords"][iframe].reshape([1, -1])
        cell = labeledsystem["cells"][iframe].reshape([1, -1])
        atype = labeledsystem["atom_types"]
        e, f, v = dp.eval(coordinate, cell, atype)
        result_energy["DP"].append(e[0][0]/natoms)
        result_force["DP"].append(f[0].tolist())
        process_bar(counter, labeledsystem.get_nframes(), " dp testing for %s..."%dir_name)

    json_str = json.dumps(result_energy, indent=4)
    output_json = 'dp_test_energy_' + labeledsystem.formula + '_' + os.path.basename(dir_name) + '.json'
    with open(output_json, "w") as f:
        f.write(json_str)

    json_str = json.dumps(result_force, indent=4)
    output_json = 'dp_test_force_' + labeledsystem.formula + '_' + os.path.basename(dir_name) + '.json'
    with open(output_json, "w") as f:
        f.write(json_str)

def dp_test_for_deepmd_raw_dir(root_dir, dp_potential):
    from dpdata import LabeledSystem
    from deepmd.infer import DeepPot

    str_in = input("\n If dp test? y or n: ")
    if str_in == "Y" or str_in == "y":
        result_energy, result_force = {}, {}
        for tmp in ["DFT", "DP"]:
            result_energy[tmp] = []
            result_force[tmp] = []

        dp = DeepPot(dp_potential)
        labeledsystem = LabeledSystem(root_dir, fmt="deepmd/npy")
        natoms = labeledsystem.get_natoms()
        for iframe in range(labeledsystem.get_nframes()):
            result_energy["DFT"].append(labeledsystem["energies"][iframe]/natoms)
            result_force["DFT"].append(labeledsystem["forces"][iframe].tolist())
            coordinate = labeledsystem["coords"][iframe].reshape([1, -1])
            cell = labeledsystem["cells"][iframe].reshape([1, -1])
            atype = labeledsystem["atom_types"]
            e, f, v = dp.eval(coordinate, cell, atype)
            result_energy["DP"].append(e[0][0]/natoms)
            result_force["DP"].append(f[0].tolist())
            process_bar(iframe+1, labeledsystem.get_nframes(), " dp testing...")

        print(" Write results in %s and %s file..."%('dp_test_energy.json', 'dp_test_force.json'))
        json_str = json.dumps(result_energy, indent=4)
        output_json = 'dp_test_energy.json'
        with open(output_json, "w") as f:
            f.write(json_str)
        json_str = json.dumps(result_force, indent=4)
        output_json = 'dp_test_force.json'
        with open(output_json, "w") as f:
            f.write(json_str)

    str_in = input("\n Now, all the dp test tasks have been finished, if plot those data? y or n: ")
    if str_in == "y" or str_in == "Y":
        from plot_new import plot_five_figures_dp_vs_dft
        energy_DFT, energy_DP = [], []
        force_DFT, force_DP = [], []
        
        jdata = json.load(open("dp_test_energy.json"))
        energy_DFT.extend(jdata["DFT"])
        energy_DP.extend(jdata["DP"])

        jdata = json.load(open("dp_test_force.json"))
        force_DFT.extend(jdata["DFT"])
        force_DP.extend(jdata["DP"])
        force_DFT = np.array(force_DFT).flatten().tolist()
        force_DP  = np.array(force_DP).flatten().tolist()

        print(" Energy RMSE: %.3e   eV/Atom"% np.sqrt(mean_squared_error(energy_DFT, energy_DP)))
        print(" Energy R^2 : %.7f   "%r2_score(energy_DFT, energy_DP))
        print(" Force  RMSE: %.3e   eV/Angstrom"% np.sqrt(mean_squared_error(force_DFT, force_DP)))
        print(" Force  R^2 : %.7f   "%r2_score(force_DFT, force_DP))

        plot_five_figures_dp_vs_dft(energy_DFT, energy_DP, force_DFT, force_DP, prefix="")
###########################################################
